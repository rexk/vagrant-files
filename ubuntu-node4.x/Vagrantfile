# -*- mode: ruby -*-
# vi: set ft=ruby :

$ESSENTIAL = <<-SCRIPT
  export LANGUAGE=en_US.UTF-8
  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8
  locale-gen en_US.UTF-8
  dpkg-reconfigure locales
  apt-get update -y
  apt-get install -y -q git zsh build-essential curl
  git config --global core.autocrlf false
  chsh -s `which zsh`
  chsh -s `which zsh` vagrant
SCRIPT

#
# Once you used it, you can't stop it!!
#
$OH_MY_ZSH = <<-SCRIPT
  wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh
SCRIPT

def get_node_install_string(version="4.x")
  $apt_get = <<-SCRIPT
    curl --silent --location https://deb.nodesource.com/setup_#{version} | bash -
    apt-get install -y -q nodejs
    npm install -g npm
  SCRIPT
  return $apt_get
end

#
# bin-links creates symlinks and it is bad business for synced_folders
#
$NO_BIN_LINKS = <<-SCRIPT
  npm config set bin-links false
SCRIPT

Vagrant.configure(2) do |config|

  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Define ssh configrations
  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine

     # Customize the amount of memory on the VM:
     vb.cpus = 2
     vb.memory = 1024 * 4
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  config.vm.provision :shell, inline: $ESSENTIAL
  config.vm.provision :shell, inline: $OH_MY_ZSH
  config.vm.provision :shell, inline: get_node_install_string("4.x")
  config.vm.provision :shell, inline: $NO_BIN_LINKS
  config.vm.provision :shell, privileged: false, inline: $OH_MY_ZSH
  config.vm.provision :shell, privileged: false, inline: $NO_BIN_LINKS

end
